<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Software Engineering on Yousef Albael</title>
        <link>http://localhost:1313/categories/software-engineering/</link>
        <description>Recent content in Software Engineering on Yousef Albael</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 03 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/software-engineering/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Monolithic Software</title>
        <link>http://localhost:1313/post/monolithic-software/</link>
        <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/monolithic-software/</guid>
        <description>&lt;img src="http://localhost:1313/post/monolithic-software/ms.png" alt="Featured image of post Monolithic Software" /&gt;&lt;h3 id=&#34;what-is-meant-by-monolithic-architecture&#34;&gt;What is meant by monolithic architecture?
&lt;/h3&gt;&lt;p&gt;Monolithic architecture refers to a traditional software development model where all functions of an application are integrated into a single, tightly coupled codebase. This approach enables the handling of multiple related tasks within one unified system, but it also leads to challenges, as modifications in one area can significantly impact the entire codebase. In contrast to modular alternatives like microservices, which break down applications into independent components that can be developed, deployed, and scaled individually, monolithic architecture can be restrictive and time-consuming to update.&lt;/p&gt;
&lt;h3 id=&#34;lets-discover-different-aspects-of-monolithic-architecture&#34;&gt;Let’s discover different aspects of monolithic architecture:
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt;: Developers install the entire application code base and dependencies in a single environment, so it’s easier in comparison to alternatives like microservices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Development&lt;/strong&gt;: Starting a monolithic application is simpler since it requires less upfront planning. You can begin and continue to add code modules as required. Over time, though, the application may get complicated and difficult to update or modify.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scaling&lt;/strong&gt;: As they scale, monolithic apps encounter a number of difficulties. The entire program must be scaled as needs change because the monolithic architecture houses all functionalities in a single code base.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;but-when-is-building-monolithic-software-preferable&#34;&gt;But when is building monolithic software preferable?
&lt;/h3&gt;&lt;p&gt;There are instances where using a monolithic architecture may be more beneficial than microservices. For example, Twilio&amp;rsquo;s Segment transitioned from a microservices approach to a monolithic one due to the complexities that microservices introduced, such as increased operational overhead, challenges in debugging, and the need for greater coordination among teams.&lt;/p&gt;
&lt;p&gt;Similarly, Amazon Prime Video initially implemented distributed components for its audio and video quality monitoring but found it too costly to maintain at scale. They ultimately decided to consolidate these components into a single monolithic application. These cases illustrate that a simpler, monolithic architecture can facilitate faster development cycles and reduce overhead.&lt;/p&gt;
&lt;h3 id=&#34;in-conclusion-monolithic-software-should-be-considered-when&#34;&gt;In conclusion, monolithic software should be considered when:
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Project Simplicity&lt;/strong&gt;: The application is small and straightforward, requiring limited functionality.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rapid Development Needs&lt;/strong&gt;: There’s a need for quick delivery of a functional product without the complexities of managing multiple services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Limited Team Size&lt;/strong&gt;: The development team is small, making it easier to manage a single codebase rather than coordinating across multiple services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Low Scalability Requirements&lt;/strong&gt;: The application is not expected to grow significantly, making the overhead of a microservices architecture unnecessary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unified Deployment&lt;/strong&gt;: Components are tightly integrated and need to be deployed together, simplifying the deployment process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;most-common-architecture-styles-for-monolithic-software&#34;&gt;Most Common Architecture Styles for Monolithic Software:
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Layered Pattern&lt;/strong&gt;: This divides the monolith into logical layers, typically including a presentation layer (UI), a business layer (business logic), and a data layer (database operations).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Model-View-Controller (MVC)&lt;/strong&gt;: Common in web applications, MVC separates the application into three components: the model (data), the view (user interface), and the controller (handles input and updates).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pipe and Filter&lt;/strong&gt;: This pattern structures systems that process data streams, with each processing step encapsulated in a filter and connected by pipes for buffering or synchronization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Client-Server&lt;/strong&gt;: In this architecture, the system is split into a server (providing services) and a client (accessing those services), often running on the same machine and communicating through function calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Blackboard&lt;/strong&gt;: This pattern addresses complex problems by allowing multiple specialized subsystems to contribute their knowledge to a central component (the blackboard), which contains structured information from the problem domain.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;advantages-of-monolithic-software&#34;&gt;Advantages of Monolithic Software:
&lt;/h3&gt;&lt;p&gt;Monolithic architecture offers several advantages, starting with its simplicity in development. It follows a standard approach, requiring no additional knowledge, as all source code is centralized in one location, making it easy to understand. Debugging is straightforward since all code is contained within a single unit, allowing for a clear trace of requests and issues. Testing is also simplified, as only one service needs to be tested without external dependencies. Deployment is efficient, involving just one unit, such as a jar file, and eliminating concerns about breaking changes when the UI is integrated with backend code.&lt;/p&gt;
&lt;p&gt;Moreover, the evolution of the application is seamless since there are no limitations from a business logic standpoint; necessary data for new features is already available. Cross-cutting concerns, such as security and logging, need to be addressed only once, streamlining the development process. Onboarding new team members becomes easier as the codebase is consolidated, enabling them to quickly debug and familiarize themselves with the application. Finally, during the early stages, the low cost of maintaining a single deployment unit minimizes infrastructure and development expenses, making it an attractive option for startups and small projects.&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References:
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://aws.amazon.com/compare/the-difference-between-monolithic-and-microservices-architecture/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AWS: Monolithic vs Microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.akamai.com/blog/cloud/monolith-versus-microservices-weigh-the-difference&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Akamai: Monolith Versus Microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.designgurus.io/blog/monolithic-service-oriented-microservice-architecture&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Design Gurus: Monolithic vs Microservice Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://datamify.medium.com/monolithic-architecture-advantages-and-disadvantages-e71a603eec89&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Datamify: Monolithic Architecture Advantages and Disadvantages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Java Multithreading</title>
        <link>http://localhost:1313/post/java-multithreading/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/post/java-multithreading/</guid>
        <description>&lt;img src="http://localhost:1313/post/java-multithreading/java.png" alt="Featured image of post Java Multithreading" /&gt;&lt;h1 id=&#34;java-multithreading-notes&#34;&gt;Java Multithreading Notes
&lt;/h1&gt;&lt;p&gt;These are course notes taken from &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/@RayanSlim087&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Rayan Slim&lt;/a&gt;&lt;/strong&gt; Multithreading playlist, which is really good and worth the watch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multithreading&lt;/strong&gt; in Java is a process of executing multiple threads simultaneously.&lt;/p&gt;
&lt;p&gt;A thread is a lightweight sub-process, the smallest unit of processing. Multiprocessing and multithreading, both are used to achieve multitasking.&lt;/p&gt;
&lt;p&gt;In Java, a thread always exists in any one of the following states. These states are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;New&lt;/li&gt;
&lt;li&gt;Active&lt;/li&gt;
&lt;li&gt;Blocked / Waiting&lt;/li&gt;
&lt;li&gt;Timed Waiting&lt;/li&gt;
&lt;li&gt;Terminated&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;explanation-of-different-thread-states&#34;&gt;Explanation of Different Thread States
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;New:&lt;/strong&gt;  Whenever a new thread is created, it is always in the new state. For a thread in the new state, the code has not been run yet and thus has not begun its execution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Active:&lt;/strong&gt;  When a thread invokes the start() method, it moves from the new state to the active state. The active state contains two states within it: one is  &lt;strong&gt;runnable&lt;/strong&gt;, and the other is  &lt;strong&gt;running&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blocked or Waiting:&lt;/strong&gt;  Whenever a thread is inactive for a span of time (not permanently) then, either the thread is in the blocked state or is in the waiting state.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Terminated:&lt;/strong&gt;  A thread reaches the termination state because of the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a thread has finished its job, then it exists or terminates normally.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Abnormal termination:&lt;/strong&gt;  It occurs when some unusual events such as an unhandled exception or segmentation fault.
&lt;img src=&#34;https://images.javatpoint.com/core/images/life-cycle-of-a-thread.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Java thread life cycle&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;creating-a-thread&#34;&gt;Creating a Thread
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChildThreadTask&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Runnable{  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(){ count(); }}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This class is used to create a thread that executes the &lt;code&gt;count()&lt;/code&gt; method when started.&lt;/p&gt;
&lt;p&gt;Or we can use lambda expression&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread T1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread( () &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {count();});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;setting-priority&#34;&gt;Setting Priority
&lt;/h3&gt;&lt;p&gt;When giving max priority, it doesn&amp;rsquo;t mean it will be the first to run, but we can gurantee it finishes first&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T2.&lt;span style=&#34;color:#a6e22e&#34;&gt;setPriority&lt;/span&gt;(Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;MAX_PRIORITY&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To make other threads surrender or give away thier turn in running we can use Yeild()&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Thread.yield()&lt;/code&gt; in Java is a static method that signals to the thread scheduler that the current thread is willing to pause its execution and allow other threads of the same or higher priority to run. However, there are important details to understand about what &lt;code&gt;yield()&lt;/code&gt; does and doesn&amp;rsquo;t do:&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example
&lt;/h2&gt;&lt;p&gt;Now having these three threads: Thread - 0, Thread - 1 and Thread - 2
First two are of the same priority&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread T1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread( () &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {count();});  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread T2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread( () &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {count();});  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread T3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread( () &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {count();});  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T1.&lt;span style=&#34;color:#a6e22e&#34;&gt;setPriority&lt;/span&gt;(Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;MAX_PRIORITY&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T1.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T2.&lt;span style=&#34;color:#a6e22e&#34;&gt;setPriority&lt;/span&gt;(Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;MAX_PRIORITY&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;T2.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We also have a count method that will run when a thread starts, printing some information, and a yield method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;(){  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 100; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Current Thread: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; It&amp;#39;s state is &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getState&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; With Prioirty &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getPriority&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; Counting - &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thread-2&amp;#34;&lt;/span&gt;)) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;yield&lt;/span&gt;();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The expected output for this code, Both threads with the highest priority will be executed at some turn, then they will alternate execution due to yield, and continue running until they finish, Thread-2 will not get affected by Yeild since it&amp;rsquo;s out the condition.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 81
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 80
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 82
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 81
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 83
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 82
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 84
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 83

Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 81
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 80
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 82
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 81
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 83
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 82
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 84
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 83
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 85
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 84
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 86
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 85
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 87
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 86
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 88
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 87
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 89
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 88
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 90
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 91
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 89
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 92
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 90
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 3
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 93
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 91
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 4
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 94
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 92
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 95
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 5
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 93
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 96
Current Thread: main It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 4
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 6
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 94
Current Thread: main It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 5
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 95
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 97
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 7
Current Thread: main It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 6
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 96
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 98
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 97
Current Thread: Thread-0 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 99
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 98
Current Thread: Thread-1 It&amp;#39;s state is RUNNABLE With Prioirty 10 Counting - 99
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that Thread -1 finished, Another Thread starts, doesn&amp;rsquo;t yield though.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 8
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 9
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 10
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 11
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 12
Current Thread: main It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 7
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 13
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 14
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 15
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 16
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 17
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 18
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 19
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 20
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 21
Current Thread: Thread-2 It&amp;#39;s state is RUNNABLE With Prioirty 5 Counting - 22
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;thread-inheritance&#34;&gt;Thread Inheritance
&lt;/h1&gt;&lt;p&gt;In this section we are trying to be a little more organized and leverage the use of Object Oriented Architecture for managing and creating threads.&lt;/p&gt;
&lt;p&gt;All we have to do is create a class that extends Thread class, override it&amp;rsquo;s run method and add your own logic&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AtheleteThread&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Thread{  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bibNumber;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AtheleteThread&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bibNumber) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bibNumber&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bibNumber;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getBibNumber&lt;/span&gt;() {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bibNumber;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;setBibNumber&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bibNumber) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bibNumber&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bibNumber;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;() {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; distanceKM &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 10;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; steps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0.&lt;span style=&#34;color:#a6e22e&#34;&gt;00000001&lt;/span&gt;;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; distanceKM; i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; steps) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; distanceKM) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; steps) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\nAthlete number &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bibNumber &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; has finished the race.\n&amp;#34;&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then all you have to do is&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AtheleteThread firstAthelete  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AtheleteThread(123123);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AtheleteThread secondAthelete  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AtheleteThread(999999);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firstAthelete.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;secondAthelete.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s much cleaner than having to do this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Creating the first athlete thread  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Thread firstAthlete &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bibNumber &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 84921;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        runRace(bibNumber);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Creating the second athlete thread  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Thread secondAthlete &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bibNumber &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 43114;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        runRace(bibNumber);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Starting the threads  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  firstAthlete.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    secondAthlete.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runRace&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bibNumber) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; distanceKM &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 10;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; steps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0.&lt;span style=&#34;color:#a6e22e&#34;&gt;00000001&lt;/span&gt;;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; distanceKM; i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; steps) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;abs&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; distanceKM) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; steps) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\nAthlete number &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bibNumber &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; has finished the race.\n&amp;#34;&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;thread-joinning&#34;&gt;Thread Joinning
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Thread joining&lt;/strong&gt; is a mechanism in Java (and many other programming languages) that allows one thread to wait for the completion of another. It is achieved using the &lt;code&gt;join()&lt;/code&gt; method provided by the &lt;code&gt;Thread&lt;/code&gt; class.&lt;/p&gt;
&lt;h3 id=&#34;how-join-works&#34;&gt;How &lt;code&gt;join()&lt;/code&gt; Works:
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;When &lt;code&gt;threadA.join()&lt;/code&gt; is called in the context of another thread (e.g., &lt;code&gt;threadB&lt;/code&gt;), &lt;code&gt;threadB&lt;/code&gt; will pause its execution and wait until &lt;code&gt;threadA&lt;/code&gt; has completed its execution.&lt;/li&gt;
&lt;li&gt;Once &lt;code&gt;threadA&lt;/code&gt; finishes, &lt;code&gt;threadB&lt;/code&gt; resumes execution from the point where it called &lt;code&gt;join()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this example we have 4 Threads, each representing a player doing progress on some game, calculating score, when finished the main threads displays the player with most score.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PlayerThread&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; threads &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlayerThread&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; threads.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    threads&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlayerThread(i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;1);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    threads&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// TODO: Task One - Wait for all player threads to finish  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Determine the player with the highest score  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; winningScore &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; winner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; threads.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (threads&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getScore&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; winningScore) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        winningScore &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; threads&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getScore&lt;/span&gt;();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        winner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Player &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; winner &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; wins with a score of &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; winningScore);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But you can notice that, the main thread finished faster that all 4 threads
and this is an issue&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Player 1 wins with a score of 504
Player 1 final score: 1349982150
Player 4 final score: 1350016018
Player 3 final score: 1350107767
Player 2 final score: 1350004850
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A simple solution is using &lt;code&gt;Join()&lt;/code&gt;, by calling it for each player thread, while on the main thread. It will cause the main thread to pause until all player threads finished&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (PlayerThread player : threads){  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    player.&lt;span style=&#34;color:#a6e22e&#34;&gt;join&lt;/span&gt;();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-Player&#34; data-lang=&#34;Player&#34;&gt;Player 4 final score: 1350028067
Player 2 final score: 1349911192
Player 3 final score: 1349980041
Player 1 wins with a score of 1350029760
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;daemon-threads&#34;&gt;Daemon Threads
&lt;/h1&gt;&lt;p&gt;Daemon threads are special types of threads in Java that run in the background and do not prevent the program from exiting. The key characteristic of daemon threads is that they &lt;strong&gt;do not block the JVM from shutting down&lt;/strong&gt; when all non-daemon (user) threads have completed. They are designed to perform background tasks, such as monitoring or housekeeping operations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Background Operation&lt;/strong&gt;: Daemon threads are typically used for tasks that are not crucial to the main execution of the program, like garbage collection, logging, or periodic checks. They work in the background while the main (user) threads are executing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JVM Shutdown&lt;/strong&gt;: The JVM can terminate as soon as all &lt;strong&gt;non-daemon&lt;/strong&gt; threads (user threads) have finished. When there are only daemon threads left, the JVM will exit, even if the daemon threads are still running. This means daemon threads don&amp;rsquo;t prevent the program from exiting, which is different from regular user threads that will cause the program to wait until they finish.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Setting a Thread as Daemon&lt;/strong&gt;: You can make a thread a daemon thread by calling the &lt;code&gt;setDaemon(true)&lt;/code&gt; method before starting it. This must be done before the thread is started; otherwise, an &lt;code&gt;IllegalThreadStateException&lt;/code&gt; will be thrown
.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this example we are creating two threads, one which performs a very intensive task, then finishes. other is used for logging&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread memoryMonitorThread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MemoryMonitorDaemon());  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;memoryMonitorThread.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread memoryIntensiveTaskThread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MemoryIntensiveTask());  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;memoryIntensiveTaskThread.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;having the code like this, the logging thread will keep executing&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MemoryMonitorDaemon&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Runnable {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;() {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Runtime runtime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Runtime.&lt;span style=&#34;color:#a6e22e&#34;&gt;getRuntime&lt;/span&gt;();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; usedMemory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runtime.&lt;span style=&#34;color:#a6e22e&#34;&gt;totalMemory&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; runtime.&lt;span style=&#34;color:#a6e22e&#34;&gt;freeMemory&lt;/span&gt;();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Memory Usage: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; usedMemory &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; bytes&amp;#34;&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(5000); &lt;span style=&#34;color:#75715e&#34;&gt;// Check memory usage every 5 seconds  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Memory monitor interrupted&amp;#34;&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.ArrayList;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Random;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MemoryIntensiveTask&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Runnable {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;() {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Random random &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Random();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 100000; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;// Reduced number of iterations  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  numbers.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(random.&lt;span style=&#34;color:#a6e22e&#34;&gt;nextInt&lt;/span&gt;());  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 1000 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(150); &lt;span style=&#34;color:#75715e&#34;&gt;// Adds a slight delay every 1000 iterations  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Memory intensive task was interrupted&amp;#34;&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Finished generating random numbers&amp;#34;&lt;/span&gt;);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the intensive task thread finishes we can see that the logging thread still running which makes no sense.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Memory Usage: 2978040 bytes
Memory Usage: 4384032 bytes
Memory Usage: 5255840 bytes
Memory Usage: 6269928 bytes
Finished generating random numbers
Memory Usage: 6269928 bytes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Lifecycle&lt;/strong&gt;: Daemon threads are typically &lt;strong&gt;short-lived&lt;/strong&gt;. Since the JVM doesn&amp;rsquo;t wait for daemon threads to finish, they may be abruptly terminated when the program exits, even if they haven&amp;rsquo;t completed their work.&lt;/p&gt;
&lt;p&gt;How we can solve this is by setting the logging thread as daemon thread&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;memoryMonitorThread.&lt;span style=&#34;color:#a6e22e&#34;&gt;setDaemon&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Memory Usage: 3271760 bytes
Memory Usage: 4194304 bytes
Memory Usage: 5255840 bytes
Memory Usage: 6269928 bytes
Finished generating random numbers

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;reducing-latency&#34;&gt;Reducing Latency
&lt;/h1&gt;&lt;h3 id=&#34;1-latency-in-threading&#34;&gt;1. &lt;strong&gt;Latency in Threading&lt;/strong&gt;:
&lt;/h3&gt;&lt;p&gt;In threading, &lt;strong&gt;latency&lt;/strong&gt; refers to the &lt;strong&gt;delay&lt;/strong&gt; or &lt;strong&gt;waiting time&lt;/strong&gt; between when a thread is scheduled to run and when it actually starts executing, or the time taken to complete a task. This is typically seen as the amount of time it takes for a thread to begin processing or the delay involved in switching between threads.&lt;/p&gt;
&lt;h4 id=&#34;examples-in-threading&#34;&gt;Examples in Threading:
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Thread Start Latency&lt;/strong&gt;: The delay between when you create and start a thread and when it actually begins running on a processor. This includes the time to schedule the thread, the overhead of context switching, and any delays introduced by operating system thread management.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Context Switch Latency&lt;/strong&gt;: When the operating system switches the CPU from one thread to another, there is a time delay involved, often known as a &amp;ldquo;context switch&amp;rdquo;. This can impact the overall response time, especially in real-time systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task Completion Latency&lt;/strong&gt;: The time it takes for a thread to complete its work. For example, if a thread performs a computation, latency could refer to how long it takes to finish that task from the time it started.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-throughput-in-threading&#34;&gt;2. &lt;strong&gt;Throughput in Threading&lt;/strong&gt;:
&lt;/h3&gt;&lt;p&gt;In threading, &lt;strong&gt;throughput&lt;/strong&gt; refers to the &lt;strong&gt;amount of work&lt;/strong&gt; or &lt;strong&gt;number of tasks&lt;/strong&gt; that are completed in a given period of time. It’s a measure of how many operations a set of threads can execute per unit of time. Essentially, it refers to how efficiently multiple threads can process tasks concurrently.&lt;/p&gt;
&lt;h4 id=&#34;examples-in-threading-1&#34;&gt;Examples in Threading:
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Task Throughput&lt;/strong&gt;: If you have a thread pool, the throughput could refer to how many tasks are processed by the threads in the pool per second.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parallel Throughput&lt;/strong&gt;: In parallel computing, throughput can be seen as the number of tasks or operations performed by all threads in a multithreaded application in a given period of time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;data-race&#34;&gt;Data Race
&lt;/h1&gt;&lt;p&gt;A &lt;strong&gt;data race&lt;/strong&gt; occurs in concurrent programming when two or more threads access the same memory location at the same time, and at least one of the threads modifies the value. The issue arises because the threads are not properly synchronized, leading to unpredictable results or bugs in the program.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-javac&#34; data-lang=&#34;javac&#34;&gt;// Thread 1
x++;

// Thread 2
x++;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If both threads read the value of &lt;code&gt;x&lt;/code&gt; at the same time before either writes back their incremented value, the final value of &lt;code&gt;x&lt;/code&gt; might not be what is expected. Both threads may read the same value of &lt;code&gt;x&lt;/code&gt; (let&amp;rsquo;s say 5), increment it, and write back 6, even though it should have been 7.&lt;/p&gt;
&lt;h2 id=&#34;how-to-solve-it&#34;&gt;How to solve it
&lt;/h2&gt;&lt;p&gt;In some cases, you may want to ensure that a variable’s value is always read from the main memory, and not cached locally in a thread’s cache. This can be useful when dealing with &lt;strong&gt;visibility issues&lt;/strong&gt; (not necessarily data races, but it can still be related).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Counter&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;volatile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCount&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; count;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or using Synchronization and locks, but this comes later&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Counter&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Object lock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Object();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt;(lock) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCount&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt;(lock) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; count;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we will talk about more topics in multithreading using this youtube video &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=ddUSe3A9MMg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=ddUSe3A9MMg&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
